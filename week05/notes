Diane Arndt
Brother Gedeborg
WDD 330
October 13, 2022

https://github.com/Diarndt/wdd330

Week 5 Notes:
Chapter 10 – Testing and Debugging
Errors, Exceptions, and Warnings
	Errors are caused when something goes wrong in a program.
	They are usually caused by one of the following:
•	System error ― there’s a problem with the system or external devices with which the program is interacting.
•	Programmer error ― the program contains incorrect syntax or faulty logic; it could even be as simple as a typo.
•	User error ― the user has entered data incorrectly, which the program is unable to handle.
Exceptions
Exception is an error that produces a return value that can then be used by the program to deal with the error.

Stack Traces
	An exception will also produce a stack trace. 
This is a sequence of functions or methods calls that lead to the point where the error occurred. 
It’s often not just a single function or method call that causes an error.
A stack trace will work backwards from the point at which the error occurred to identify the original function or method that started the sequence.
Example:
	function three(){ unicorn(); }
function two(){ three(); }
function one(){ two(); }
one();

<< index.html:13 Uncaught ReferenceError: unicorn is not defined
   	 at three (index.html:13)
  	  at two (index.html:17)
   	 at one (index.html:21)
   	 at index.html:24`
We can use the stack trace to work backwards and see that this error was caused by invoking the function one() in the first place.

Warnings
A warning can occur if there’s an error in the code that isn’t enough to cause the program to crash.
The program will continue to run with a warning
This can be problematic, since the issue that produced the warning may cause the program to continue running incorrectly.

When a runtime error occurs in the browser, the HTML will still appear, but the JS code will stop working in the background, which isn’t always obvious at first.

The importance of Testing and Debugging
Ensure that the code written fails loudly in development so any errors can be identified and fixed quickly.
While in production, try to make the code fail gracefully(although not completely silently), so the user experience is not affected.
This is done by making sure exceptions are caught and dealt with, and code is tested rigorously.




Strict Mode
Strict Mode produces more exceptions and warnings and prohibits the use of some deprecated features.
Better to spot errors early on, rather than have them cause problems later.
Can help improve clarity and speed.
Not using strict mode is often referred to as ‘sloppy mode’ as it’s forgiving of sloppy programming practices.
Strict mode encourages a better quality of JS to be written, use is recommended.
To use strict mode simply add the following to the first line of a JS file.
'use strict';

Can also be used on a per-function basis by adding the line inside a function, it will only then be applied to anything inside the function
Example:
	function strictly(){
'use strict';
// function code goes here

Recommended way to use strict mode is to place all your code into a self-invoking function.
	Example:
		(function() {
   			 'use strict';

    			// All your code would go inside this function

}());
JS modules are self-contained pieces of code that are in strict mode by default, so the ‘use strict’ declaration is not required.	

Linting Tools
JS Lint, JS Hint, and ES Lint can be used to test the quality of JS Code beyond simply using strict mode.
Designed to highlight any sloppy programming practices or syntax errors and will complain if certain style conventions are not followed.
They can be very unforgiving and use some opinionated coding conventions.
They are also useful for enforcing a programming style guide, useful when working in a team, as it ensures everybody follows the same conventions.

Feature Detection
The recommended way to determine support for a feature is to use feature detection.
This is done using the ‘if’ statement to check whether an object or method exists before trying to actually call the method.
Example:
	if (window.holoDeck) {
   		 virtualReality.activate();
}
Feature detection guarantees that the method is only called if it actually exists and fails gracefully, without any exceptions being thrown, if the method doesn’t exist.

Debugging in the Browser
	The Trusty Alert
		Use the ‘alert( )’ method to show a dialog at certain points in the code.
‘alert( )’ stops a program from running until OK is clicked, effectively putting breakpoints in the code that lets us check the value of variables at that point.



Using the Console
	console.log( ) method
	console.trace( ) method

Debugging Tools
Most modern browsers have a debugging tool that allows you to set breakpoints in code that will pause it at certain points. You can then see the values of all the variables at those points and modify them.
debugger keyword is one of the most useful commands.
This will create a breakpoint in your code that will pause the execution of the code and will allow you to see where the program is currently up to.
Hover over any variables to see what value they hold at that point.
Click the ‘play’ button to restart the program.
Note: Remember to remove any references to the debugging command before shipping any code, otherwise the program will appear to freeze when people try to use it!

Error Objects
Can be created by the host environment when an exception occurs, or it can be created in the code using a constructor function.
	Example:
		const error = new Error();
	or
		const error = new Error('Oops, something went wrong');
	There are seven more error objects used for specific errors:

EvalError is not used in the current ECMAScript specification and only retained for backwards compatibility. It was used to identify errors when using the global eval() function.

RangeError is thrown when a number is outside an allowable range of values.

ReferenceError is thrown when a reference is made to an item that doesn’t exist. For example, calling a function that hasn't been defined.

SyntaxError is thrown when there’s an error in the code’s syntax.

TypeError is thrown when there’s an error in the type of value used; for example, a string is used when a number is expected.

URIError is thrown when there’s a problem encoding or decoding the URI.

InternalError is a non-standard error that is thrown when an error occurs in the JavaScript engine. A common cause of this too much recursion.

These error objects can also be used as constructors to create custom error objects.
	Example:
		const error = new TypeError('You need to use numbers in this function');

All error objects have a number of properties, but they’re often used inconsistently across browsers. The only properties that are generally safe to use are:
•	The name property returns the name of the error constructor function used as a string, such as 'Error' or 'ReferenceError'.
•	The message property returns a description of the error and should be provided as an argument to the Error constructor function.
•	The stack property will return a stack trace for that error. This is a non-standard property and it’s recommended that it is not safe to use in production site



Throwing Exceptions
	Possible to throw your own exceptions using the ‘throw’ statement. 
The ‘throw’ statement can be applied to any JS expression, causing the execution of the program to stop.
	Example:
		throw 2;
throw 'Up';
throw { toys: 'out of pram' };	
	Best practice to throw an ‘error’ object. This can then be caught in a ‘catch’ block.
	Example: 
		throw new Error('Something has gone badly wrong!');

Exception Handling
	When an exception occurs, the program terminates with an error message.
	Allows for identify and fixing errors.
	Any errors can be hidden from users, but still identified.
	try, catch, and finally
If we suspect a piece of code will result in an exception, we can wrap it in a try block. This will run the code inside the block as normal, but if an exception occurs it will pass the error object that is thrown onto a catch block.
	Example: 
		function imaginarySquareRoot(number) {
  			  'use strict';
   			 try {
       				 return String(squareRoot(number));
  			  } catch(error) {
       				 return squareRoot(-number)+'i';
   			 }
}
A finally block can be added after a catch block. This will always be executed after the try or catch block, regardless of whether an exception occurred or not. It is useful if you want some code to run in both cases. 

Tests
	Testing is an important part of programming that can often be overlooked. 
Writing good tests means your code will be less brittle as it develops, and any errors will be identified early on.
A test can simply be a function that tests a piece of code runs as it should.

Test-driven Development
Test-driven development (TDD) is the process of writing tests before any actual code. This is often referred to as the “red-green-refactor” cycle of TDD, as failing tests usually show up as red, and tests that pass show as green.
The code is continually tested at each stage to make sure it continues to work. This process should be followed in small piecemeal chunks every time a new feature is implemented, resulting in the following workflow:
1.	Write tests (that initially fail)
2.	Write code to pass the tests
3.	Refactor the code
4.	Test refactored code
5.	Write more tests for new features
Test-driven development is considered to be best practice



	Testing Frameworks
		Jest framework
It makes it easy to create and run tests by providing helper methods for common test assertions.
Install using ‘npm’
	Enter ‘npm install -g jest’ at the command in a terminal.
Run ‘jest -v’ to check the version number that has been installed.
To run this test, simply navigate to the folder that contains the file and enter the following command:
	jest -c { } (-c { } flag is shorthand for ‘configuration’)

		Crunching Some Numbers
			Checkout a full list of Jest’s matcher methods at:
			https://jestjs.io/docs/expect

